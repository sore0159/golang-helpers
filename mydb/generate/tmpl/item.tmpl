{{ define "main"}}
{{ $sName := .Name }}
{{ $write := .Writeable }}
package {{ .PackName }}

import (
    "errors"
    "encoding/json"
    "mule/mydb/db"
    sq "mule/mydb/sql"
    gp "mule/mydb/group"{{ range .Imports }}
    "{{ . }}"{{ end }}
)

type {{ .Name }} struct { {{ range .Fields }}{{ if not .SQLOnly }}
    {{ .Name }} {{ .Type }} `json:"{{ .LowerName }}"` {{ end }}{{ end }}
    sql gp.SQLStruct
}

// --------- BEGIN GENERIC METHODS ------------ //

func New{{ .Name }}() *{{ .Name }} {
    return &{{ .Name }}{
        //
    }
}

type {{ .Name }}Intf struct {
    item *{{ .Name }}
}

func (item *{{ .Name }}) Intf() {{ .IntfPack}}{{ .Name }}Dat {
    return &{{.Name}}Intf{item}
}

func (i {{ .Name }}Intf) DELETE() {
    i.item.sql.DELETE = true
}

func (item *{{ .Name}}) SQLVal(name string) interface{} {
    switch name { {{ range .Fields }}{{ if not .NoSQL }}
    case "{{ .LowerName }}":
        return item.{{ .Name }}{{ end }}{{ end }}
    }
    return nil
}

func (item *{{ .Name}}) SQLPtr(name string) interface{} {
    switch name { {{ range .Fields }}{{ if not .NoSQL }}
    case "{{ .LowerName }}":
        return &item.{{ .Name }}{{ end }}{{ end }}
    }
    return nil
}
func (item *{{ .Name }}) SQLTable() string {
    return "{{ .LowerName }}"
}

func (i {{ .Name }}Intf) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.item)
}
func (i {{ .Name }}Intf) UnmarshalJSON(data []byte) error {
	i.item = &{{ .Name }}{}
	return json.Unmarshal(data, i.item)
}

{{ range .Fields }}{{ if not .SQLOnly }}{{ if eq .Type "sql.NullInt64" }}
func (i {{ $sName }}Intf) {{ .Name }}() int {
    if !i.item.{{ .Name }}.Valid {
        return 0
    }
    return int(i.item.{{ .Name }}.Int64)
}

func (i {{ $sName }}Intf) Set{{ .Name }}(x int) {
    if x == 0 {
        if !i.item.{{ .Name }}.Valid {
            return
        }
        i.item.{{ .Name }}.Valid = false
        i.item.{{ .Name }}.Int64 = 0
        i.item.sql.UPDATE = true
        return
    }
    x64 := int64(x)
    if i.item.{{ .Name }}.Valid && i.item.{{ .Name }}.Int64 == x64 {
        return
    }
    i.item.{{ .Name }}.Int64 = x64
    i.item.{{ .Name }}.Valid = true
    i.item.sql.UPDATE = true
}{{ else if eq .Type "sql.NullString" }}
func (i {{ $sName }}Intf) {{ .Name }}() string {
    if !i.item.{{ .Name }}.Valid {
        return ""
    }
    return i.item.{{ .Name }}.String
}
func (i {{ $sName }}Intf) Set{{ .Name }}(x string) {
    if x == "" {
        if !i.item.{{ .Name }}.Valid {
            return
        }
        i.item.{{ .Name }}.Valid = false
        i.item.{{ .Name }}.String = ""
        i.item.sql.UPDATE = true
        return
    }
    if i.item.{{ .Name }}.Valid && i.item.{{ .Name }}.String == x {
        return
    }
    i.item.{{ .Name }}.String = x
    i.item.{{ .Name }}.Valid = true
    i.item.sql.UPDATE = true
}{{ else }}
func (i {{ $sName }}Intf) {{ .Name }}() {{ .Type }} {
    return i.item.{{ .Name }}
}
{{ if and $write .Update }}
func (i {{ $sName }}Intf) Set{{ .Name }}(x {{ .Type }}) {
{{ if .Comparable }} if i.item.{{ .Name }} == x {
        return
    }
{{ end }} i.item.{{ .Name }} = x
    i.item.sql.UPDATE = true
}
{{ end }}

{{ end }}{{ end }}{{ end }}
// --------- END GENERIC METHODS ------------ //
// --------- BEGIN CUSTOM METHODS ------------ //


// --------- END CUSTOM METHODS ------------ //
// --------- BEGIN GROUP ------------ //

type {{ .Name }}Group struct {
    List []*{{ .Name }}
}

func New{{ .Name }}Group() *{{ .Name }}Group {
    return &{{ .Name }}Group{
        List: []*{{ .Name }}{},
    }
}

func (item *{{ .Name }}) SQLGroup() gp.SQLGrouper {
    return New{{ .Name }}Group()
}

func (group *{{ .Name }}Group) New() gp.SQLer {
    item := New{{ .Name }}()
    group.List = append(group.List, item)
    return item
}

func (group *{{ .Name }}Group) UpdateList() []gp.SQLer { {{ if .Writeable }}
    list := make([]gp.SQLer, 0, len(group.List))
    for _, item := range group.List {
        if item.sql.UPDATE && !item.sql.INSERT && !item.sql.DELETE {
            list = append(list, item)
        }
    }
    return list{{ else }}
    return nil{{ end }}
}

func (group *{{ .Name }}Group) InsertList() []gp.SQLer {
    list := make([]gp.SQLer, 0, len(group.List))
    for _, item := range group.List {
        if item.sql.INSERT && !item.sql.DELETE {
            list = append(list, item)
        }
    }
    return list
}

func (group *{{ .Name }}Group) DeleteList() []gp.SQLer {
    list := make([]gp.SQLer, 0, len(group.List))
    for _, item := range group.List {
        if item.sql.DELETE {
            list = append(list, item)
        }
    }
    return list
}

func (group *{{ .Name }}Group) SQLTable() string {
    return "{{ .LowerName }}"
}

func (group *{{ .Name }}Group) PKCols() []string {
    return []string{ {{ range .Fields }}{{ if .PK }}
        "{{ .LowerName }}", {{ end }}{{ end }}
    }
}

func (group *{{ .Name }}Group) InsertCols() []string {
    return []string{ {{ range .Fields }}{{ if .Insert }}
        "{{ .LowerName }}", {{ end }}{{ end }}
    }
}

func (group *{{ .Name }}Group) InsertScanCols() []string {
    return []string{ {{ range .Fields }}{{ if .InsertScan }}
        "{{ .LowerName }}", {{ end }}{{ end }}
    }
}

func (group *{{ .Name }}Group) SelectCols() []string {
    return []string{ {{ range .Fields }}{{ if not .NoSQL }}
        "{{ .LowerName }}",{{ end }}{{ end }}
    }
}

func (group *{{ .Name }}Group) UpdateCols() []string { {{ if not .Writeable }}
    return nil{{ else }}
    return []string{ {{ range .Fields }}{{ if .Update }}
        "{{ .LowerName }}", {{ end }}{{ end }}
    }{{ end }}
}


// --------- END GROUP ------------ //
// --------- BEGIN SESSION ------------ //
type {{ .Name }}Session struct {
    *{{ .Name }}Group
    *gp.Session
}

func New{{ .Name }}Session(d db.DBer) *{{ .Name }}Session {
    group := New{{ .Name }}Group()
    return &{{ .Name }}Session{
        {{ .Name }}Group: group,
        Session: gp.NewSession(group, d),
    }
}

func (s *{{ .Name }}Session) Select(conditions ...interface{}) ([]{{ .IntfPack }}{{ .Name}}Dat, error) {
    cur := len(s.{{ .Name }}Group.List)
    err := s.Session.Select(conditions...)
    if my, bad := Check(err, "{{ .Name }} select failed", "conditions", conditions); bad {
        return nil, my
    }
    return convert{{ .Name }}2Intf(s.{{ .Name }}Group.List[cur:]...), nil
}

func (s *{{ .Name }}Session) SelectWhere(where sq.Condition) ([]{{ .IntfPack }}{{ .Name}}Dat, error) {
    cur := len(s.{{ .Name }}Group.List)
    err := s.Session.SelectWhere(where)
    if my, bad := Check(err, "{{ .Name }} SelectWhere failed", "where", where); bad {
        return nil, my
    }
    return convert{{ .Name }}2Intf(s.{{ .Name }}Group.List[cur:]...), nil
}


// --------- END SESSION  ------------ //
// --------- BEGIN UTILS ------------ //

func convert{{ .Name }}2Struct(list ...{{ .IntfPack }}{{ .Name }}Dat) ([]*{{ .Name }}, error) {
    mylist := make([]*{{ .Name }}, 0, len(list))
    for _, test := range list {
        if test == nil {
            continue
        }
        if t, ok := test.({{ .Name }}Intf); ok {
            mylist = append(mylist, t.item)
        } else {
            return nil, errors.New("bad {{ .Name }} struct type for conversion")
        }
    }
    return mylist, nil
}

func convert{{ .Name }}2Intf(list ...*{{ .Name }}) []{{ .IntfPack }}{{ .Name }}Dat {
    converted := make([]{{ .IntfPack }}{{ .Name }}Dat, len(list))
    for i, item := range list {
        converted[i] = item.Intf()
    }
    return converted
}


func {{ .Name }}TableCreate(d db.DBer) error {
	query := `create table {{ .LowerName }}({{ range .Fields }}{{ if not .NoSQL }}
    {{ .LowerName }} {{ .SQLType }}{{ if not .CanNull}} NOT NULL{{ end }},{{ end }}{{ end }}
    {{ if .PKStr }}PRIMARY KEY ({{ .PKStr }})
{{ end }});`
    err := db.Exec(d, false, query)
    if my, bad := Check(err, "failed {{ .Name }} table creation", "query", query); bad {
        return my
    }
    return nil
}

func {{ .Name }}TableDelete(d db.DBer) error {
	query := "DROP TABLE IF EXISTS {{ .LowerName }} CASCADE"
    err := db.Exec(d, false, query)
    if my, bad := Check(err, "failed {{ .Name }} table deletion", "query", query); bad {
        return my
    }
    return nil
}

// --------- END UTILS ------------ //


{{ end }}

