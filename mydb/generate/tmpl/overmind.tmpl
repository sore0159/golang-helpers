{{ define "main"}}{{ $pack := (index . 0).PackName }}package {{ $pack }}

import (
    "mule/mydb/db"
    "mule/mybad"
)

var (
	Check     = mybad.BuildCheck("package", "{{ $pack }}")
)

type Manager struct {
    D db.DBer{{ range . }}
    {{ .Name }}Session *{{ .Name }}Session {{ end }}
}

func NewManager(d db.DBer) *Manager {
    return &Manager{D: d}
}

{{ range . }}
func (m *Manager) {{ .Name }}() *{{ .Name }}Session {
    s := New{{ .Name }}Session(m.D)
    m.{{ .Name }}Session = s
    return s
}

func (m *Manager) Create{{ .Name }}(item *{{ .Name }}) {
    if m.{{ .Name }}Session == nil {
        m.{{ .Name }}Session = New{{ .Name }}Session(m.D)
    }
    item.sql.INSERT = true
    m.{{ .Name }}Session.List = append(m.{{ .Name }}Session.List, item)
}

{{ end }}


func (m *Manager) Close() error {
    var err error{{ range . }}
    if m.{{ .Name }}Session != nil {
        err = m.{{ .Name }}Session.Close()
        if my, bad := Check(err, "manager close failure on {{ .Name }} Close"); bad {
            return my
        }
    }
{{ end }}
    return nil
}

func CreateAllTables(d db.DBer) error {
    var err error{{ range . }}
    err = {{ .Name }}TableCreate(d)
    if my, bad := Check(err, "Create all tables failure on table {{ .Name }}"); bad {
        return my
    }
    {{ end }}
    return nil
}

func DropAllTables(d db.DBer) error {
    var err error{{ range . }}
    err = {{ .Name }}TableDelete(d)
    if my, bad := Check(err, "Delete all tables failure on table {{ .Name }}"); bad {
        return my
    }
    {{ end }}
    return nil
}

{{ end }}
